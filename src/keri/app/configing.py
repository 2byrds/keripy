# -*- encoding: utf-8 -*-
"""
keri.app.configing module

"""

from hio.base import filing

from .. import help

logger = help.ogler.getLogger()


def openCF(cls=None, name="test", base="main", filed=True, **kwa):
    """
    Returns contextmanager generated by openFiler with Configer instance as default
    and filed = True
    """
    if cls == None:  # can't reference class before its defined below
        cls = Configer
    return filing.openFiler(cls=cls, name=name, base=base, filed=True, **kwa)


class Configer(filing.Filer):
    """
    Habitat Config File
    """
    TailDirPath = "keri/cf"
    CleanTailDirPath = "keri/clean/cf"
    AltTailDirPath = ".keri/cf"
    AltCleanTailDirPath = ".keri/clean/cf"
    TempPrefix = "keri_cf_"

    def __init__(self, name="conf", base="main", filed=True, **kwa):
        """
        Setup config file .file at .path

        Parameters:
            name (str): directory path name differentiator directory/file
                When system employs more than one keri installation, name allows
                differentiating each instance by name
            base (str): optional directory path segment inserted before name
                that allows further differentation with a hierarchy. "" means
                optional.
            temp (bool): assign to .temp
                True then open in temporary directory, clear on close
                Otherwise then open persistent directory, do not clear on close
            headDirPath (str): optional head directory pathname for main database
                Default .HeadDirPath
            mode (int): optional numeric os dir permissions for database
                directory and database files. Default .DirMode
            reopen (bool): True means (re)opened by this init
                           False  means not (re)opened by this init but later
            clear (bool): True means remove directory upon close if reopon
                          False means do not remove directory upon close if reopen
            reuse (bool): True means reuse self.path if already exists
                          False means do not reuse but remake self.path
            clean (bool): True means path uses clean tail variant
                             False means path uses normal tail variant
            filed (bool): True means .path is file path not directory path
                          False means .path is directiory path not file path
            mode (str): File open mode when filed
            fext (str): File extension when filed

        """
        super(Configer, self).__init__(name=name, base=base, filed=True, **kwa)

